import Head from 'next/head'
import React, { useEffect, useState } from 'react'
import { authenticatedRequest } from '../client/http'
import { getTokenFromStorage } from '../client/localStorage'
import {
  apiRouteFile,
  apiRouteFileShare,
  apiRouteFileUpload,
} from '../client/routes'
import File from '../components/File/File'
import Header from '../components/Header/Header'
import AddFilesDialog from '../components/Partials/AddFilesDialog'
import ShareFilesDialog from '../components/Partials/ShareFilesDialog'
import { getUserFiles, getUserFilesIfNotExists } from '../store/filesStore'
import { getMe } from '../store/meStore'
import { useAppDispatch, useAppSelector } from '../store/store'
import { getUsersIfNotExists, TFilePermission } from '../store/userStore'

type HomeState = {
  selectedFileIds: string[]
  isAddingFiles: boolean
  isSharingFiles: boolean
}

export default function Home() {
  const dispatch = useAppDispatch()
  const { files, me } = useAppSelector((state) => ({
    files: state.files,
    me: state.me,
  }))
  const [state, setState] = useState<HomeState>({
    selectedFileIds: [],
    isAddingFiles: false,
    isSharingFiles: false,
  })

  const request = authenticatedRequest(getTokenFromStorage())
  const canShareSelected = state.selectedFileIds.every(
    (selectedFileId) =>
      files.data.find((file) => file.id === selectedFileId)!.owner === me.id
  )
  const canDeleteSelected = state.selectedFileIds.every((selectedFileId) => {
    const file = files.data.find((file) => file.id === selectedFileId)
    return file.owner === me.id || file?.userPermission[me.id].delete
  })

  useEffect(() => {
    dispatch(getUserFilesIfNotExists)
    dispatch(getMe)
    dispatch(getUsersIfNotExists)
  }, [])

  const onCloseAddingFiles = () => setState({ ...state, isAddingFiles: false })
  const onOpenAddingFiles = () => setState({ ...state, isAddingFiles: true })

  const onCloseSharingFiles = () =>
    setState({ ...state, isSharingFiles: false })
  const onOpenSharingFiles = () => setState({ ...state, isSharingFiles: true })

  const onSelectFile = (id: string) => {
    const isSelected = state.selectedFileIds.includes(id)
    if (isSelected) {
      setState({
        ...state,
        selectedFileIds: state.selectedFileIds.filter(
          (selectedFile) => selectedFile !== id
        ),
      })
    } else {
      setState({ ...state, selectedFileIds: state.selectedFileIds.concat(id) })
    }
  }

  const onDeleteSelected = async () => {
    try {
      await request.delete(
        `${apiRouteFile}?${state.selectedFileIds.reduce(
          (acc, next) => acc + '&id=' + next,
          ''
        )}`
      )
      setState({ ...state, selectedFileIds: [] })
      dispatch(getUserFiles)
    } catch (error) {
      console.log(error)
    }
  }

  const onShare = async (permission: TFilePermission) => {
    try {
      const body = { fileIds: state.selectedFileIds, permission }
      await request.put(apiRouteFileShare, JSON.stringify(body))

      setState({ ...state, isSharingFiles: false, selectedFileIds: [] })
      dispatch(getUserFiles)
    } catch (error) {
      console.log(error)
    }
  }

  const onUpload = async (files: File[]) => {
    try {
      const formData = new FormData()
      files.forEach((file) => formData.append(file.name, file))

      await request.post(apiRouteFileUpload, formData)

      setState({ ...state, isAddingFiles: false })
      dispatch(getUserFiles)
    } catch (error) {
      console.log(error)
    }
  }

  return (
    <>
      <Head>
        <title>MyDrive</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div>
        <Header>
          <>
            <p className="header__upload" onClick={onOpenAddingFiles}>
              Upload files
            </p>
            <div className="header__avatar avatar">
              {me.name.substring(0, 1)}
            </div>
          </>
        </Header>
        <main className="main">
          <div className={'container'}>
            <h1 className="m-b-2">Files</h1>
            <div className="file-actions row">
              <button className="file-actions__action" disabled={true}>
                search
              </button>
              <button className="file-actions__action" disabled={true}>
                view: grid
              </button>
              <button className="file-actions__action" disabled={true}>
                view: table
              </button>
              <button className="file-actions__action" disabled={true}>
                sort
              </button>
              <button className="file-actions__action" disabled={true}>
                filter
              </button>

              {Boolean(state.selectedFileIds.length) && (
                <div className="file-actions__selected">
                  <button
                    className="file-actions__action"
                    onClick={onDeleteSelected}
                    disabled={!canDeleteSelected}
                  >
                    Delete selected
                  </button>
                  <button
                    className="file-actions__action"
                    onClick={onOpenSharingFiles}
                    disabled={!canShareSelected}
                  >
                    Share selected
                  </button>
                </div>
              )}
            </div>
            <div className="row">
              {files.data.map((file) => (
                <File
                  key={file.id}
                  file={file}
                  onClick={() => onSelectFile(file.id)}
                  isSelected={Boolean(
                    state.selectedFileIds.find((id) => id === file.id)
                  )}
                />
              ))}
            </div>
          </div>
        </main>
        <AddFilesDialog
          isOpen={state.isAddingFiles}
          onClose={onCloseAddingFiles}
          onUpload={onUpload}
        />
        <ShareFilesDialog
          isOpen={state.isSharingFiles}
          onClose={onCloseSharingFiles}
          onShare={onShare}
          fileNames={state.selectedFileIds}
        />
      </div>
    </>
  )
}
