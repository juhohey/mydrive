import Head from 'next/head'
import React, { SyntheticEvent, useEffect, useState } from 'react'
import { deleteHttp, post } from '../client/http'
import { apiRouteFile, apiRouteFileUpload } from '../client/routes'
import Dialog from '../components/Dialog/Dialog'
import File from '../components/File/File'
import Header from '../components/Header/Header'
import { getUserFiles, getUserFilesIfNotExists } from '../store/filesStore'
import { useAppDispatch, useAppSelector } from '../store/store'

type HomeState = {
  selectedFiles: string[]
  isAddingFiles: boolean
}

export default function Home() {
  const dispatch = useAppDispatch()
  const files = useAppSelector((state) => state.files)
  const [state, setState] = useState<HomeState>({
    selectedFiles: [],
    isAddingFiles: false,
  })
  useEffect(() => {
    dispatch(getUserFilesIfNotExists)
  }, [])

  const onCloseAddingFiles = () => setState({ ...state, isAddingFiles: false })
  const onOpenAddingFiles = () => setState({ ...state, isAddingFiles: true })

  const onUploadedFiles = () => {
    setState({ ...state, isAddingFiles: false })
    dispatch(getUserFiles)
  }

  const onSelectFile = (id: string) => {
    const isSelected = state.selectedFiles.includes(id)
    if (isSelected) {
      setState({
        ...state,
        selectedFiles: state.selectedFiles.filter(
          (selectedFile) => selectedFile !== id
        ),
      })
    } else {
      setState({ ...state, selectedFiles: state.selectedFiles.concat(id) })
    }
  }

  const onDeleteSelected = async () => {
    try {
      await deleteHttp(
        `${apiRouteFile}?${state.selectedFiles.reduce(
          (acc, next) => acc + '&id=' + next,
          ''
        )}`
      )
      setState({ ...state, selectedFiles: [] })
      dispatch(getUserFiles)
    } catch (error) {
      console.log(error)
    }
  }

  return (
    <>
      <Head>
        <title>MyDrive</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div>
        <Header>
          <>
            <button onClick={onOpenAddingFiles}>Upload</button>
            <div className="header__avatar avatar">
              <p>userName</p>
            </div>
          </>
        </Header>
        <main className="main">
          <div className={'container'}>
            <h1 className="m-b-2">Files</h1>
            <div className="file-actions row">
              <p className="file-actions__action">search</p>
              <p className="file-actions__action">view: grid</p>
              <p className="file-actions__action">view: table</p>
              <p className="file-actions__action">sort</p>
              <p className="file-actions__action">filter</p>

              {Boolean(state.selectedFiles.length) && (
                <div className="file-actions__selected">
                  <button onClick={onDeleteSelected}>Delete selected</button>
                  <button>Share selected</button>
                </div>
              )}
            </div>
            <div className="row">
              {files.data.map((file) => (
                <File
                  key={file.id}
                  file={file}
                  onClick={() => onSelectFile(file.id)}
                  isSelected={Boolean(
                    state.selectedFiles.find((id) => id === file.id)
                  )}
                />
              ))}
            </div>
          </div>
        </main>
        <AddFilesDialog
          isOpen={state.isAddingFiles}
          onClose={onCloseAddingFiles}
          onUploaded={onUploadedFiles}
        />
      </div>
    </>
  )
}

type AddFilesDialogProps = {
  isOpen: boolean
  onClose: () => void
  onUploaded: () => void
}

const AddFilesDialog = ({
  isOpen,
  onClose,
  onUploaded,
}: AddFilesDialogProps) => {
  const [files, setFiles] = useState<File[]>([])

  const onSetFiles = (e: SyntheticEvent<HTMLInputElement>) => {
    const target = e.target as HTMLInputElement
    const files = target.files || []
    setFiles([...files])
  }

  const onUpload = async () => {
    try {
      const formData = new FormData()
      files.forEach((file) => formData.append(file.name, file))
      await post(apiRouteFileUpload, formData)
      onUploaded()
    } catch (error) {
      console.log('err', error)
    }
  }

  return (
    <Dialog
      isOpen={isOpen}
      onClose={onClose}
      onConfirm={onUpload}
      confirmLabel={'upload'}
    >
      <div className="m-b-4">
        <h1 className="m-b-1">Add files</h1>
        <input type="file" multiple={true} onChange={onSetFiles} />
      </div>
      <h2 className="m-b-1">Files</h2>
      <div className="upload-files">
        {files.map((file, i) => {
          return (
            <div key={i + file.name} className="upload-files__file">
              {file.name}
            </div>
          )
        })}
      </div>
    </Dialog>
  )
}
